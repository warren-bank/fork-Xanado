{"version":3,"file":"standalone/GameDialog.StandaloneGamesUI.js","mappings":"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","sources":["webpack://@warren-bank/scrabble/./src/browser/Dialog.js","webpack://@warren-bank/scrabble/./src/browser/GameDialog.js"],"sourcesContent":["/*Copyright (C) 2019-2022 The Xanado Project https://github.com/cdot/Xanado\r\n  License MIT. See README.md at the root of this distribution for full copyright\r\n  and license information. Author Crawford Currie http://c-dot.co.uk*/\r\n/* eslint-env browser, jquery */\r\n\r\n/* global Platform */\r\n\r\n/**\r\n * Base class of modal dialogs with demand-loadable HTML and a submit\r\n * button.\r\n *\r\n * HTML is loaded on demand from the html directory, based in the `id`\r\n * of the dialog (or the `html` option.\r\n *\r\n * In the HTML, any input or select that has a \"name\" attribute will\r\n * be used to populate a structure representing the dialog data.\r\n *\r\n * If a `postAction` URL option is set, this structure will be posted to the\r\n * URL and the result passed to an optional `postResult` function.\r\n *\r\n * Alternatively (or additionally), the `onSubmit` option can be set to\r\n * a function that will be called with `this` when the submit button\r\n * is pressed, *before* the `postAction` is sent.\r\n */\r\nclass Dialog {\r\n\r\n  /**\r\n   * Construct the named dialog, demand-loading the HTML as\r\n   * necessary. Do not use this - use {@linkcode Dialog#open|open()}\r\n   * instead.\r\n   * @param {string} id the dialog name\r\n   * @param {object} options options\r\n   * @param {string?} options.html optional name of HTML file to\r\n   * load, defaults to the id of the dialog\r\n   * @param {string?} options.postAction AJAX call name. If defined,\r\n   * the dialog fields will be posted here on close.\r\n   * @param {function?} options.postResult passed result\r\n   * of postAction AJAX call. Does nothing unless `postAction` is also\r\n   * defined.\r\n   * @param {function?} options.onSubmit Passed this, can be used without\r\n   * postAction.\r\n   * @param {function} options.error error function, passed jqXHR\r\n   */\r\n  constructor(id, options) {\r\n    /**\r\n     * Identifier for this dialog\r\n     */\r\n    this.id = id;\r\n\r\n    /**\r\n     * Cache of settings\r\n     * @member {object}\r\n     */\r\n    this.options = options;\r\n\r\n    /**\r\n     * Cache of jQuery object\r\n     * @member {jQuery}\r\n     * @private\r\n     */\r\n    this.$dlg = $(`#${id}`);\r\n\r\n    let promise;\r\n    if (this.$dlg.length === 0) {\r\n      // HTML is not already present; load it asynchronously.\r\n      promise = $.get(Platform.getFilePath(\r\n        `html/${options.html || id}.html`))\r\n      .then(html_code => {\r\n        $(\"body\").append(\r\n          $(document.createElement(\"div\"))\r\n          .attr(\"id\", id)\r\n          .addClass(\"dialog\")\r\n          .html(html_code));\r\n        this.$dlg = $(`#${id}`);\r\n      });\r\n    } else\r\n      promise = Promise.resolve();\r\n\r\n    promise\r\n    .then(() => this.$dlg.dialog({\r\n      title: options.title,\r\n      width: 'auto',\r\n      minWidth: 400,\r\n      modal: true,\r\n      open: () => {\r\n        if (this.$dlg.data(\"dialog_created\"))\r\n          this.openDialog();\r\n        else {\r\n          this.$dlg.data(\"dialog_created\", true);\r\n          this.createDialog()\r\n          .then(() => this.openDialog());\r\n        }\r\n      }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Handle dialog creation once the HTML has been loaded, mainly\r\n   * for associating handlers and loading background data. This is\r\n   * invoked on an `open` event rather than `create` so we can be\r\n   * sure all initialisation steps are complete before the dialog\r\n   * opens.\r\n   * Override in subclasses to attach handlers etc. Subclasses should\r\n   * return super.createDialog()\r\n   * @protected\r\n   */\r\n  createDialog() {\r\n    this.$dlg\r\n    .find(\"[data-i18n]\")\r\n    .i18n();\r\n\r\n    this.$dlg\r\n    .find(\"input[data-i18n-placeholder]\")\r\n    .each(function() {\r\n      $(this).attr(\"placeholder\", $.i18n(\r\n        $(this).data(\"i18n-placeholder\")));\r\n    });\r\n\r\n    this.$dlg\r\n    .find(\"label[data-image]\")\r\n    .each(function() {\r\n      $(this).css(\"background-image\",\r\n                  `url(\"${$(this).data('image')}\")`);\r\n    });\r\n\r\n    // Using tooltips with a selectmenu is tricky.\r\n    // Applying tooltip() to the select is useless, you have\r\n    // to apply it to the span that is inserted as next\r\n    // sibling after the select. However this span is not\r\n    // created until some indeterminate time in the future,\r\n    // and there is no event triggered.\r\n    //\r\n    // What we have to do is to wait until the selectmenus\r\n    // have (hopefully!) been created before creating the\r\n    // tooltips.\r\n    const self = this;\r\n    this.$dlg\r\n    .find('select')\r\n    .selectmenu()\r\n    .on(\"selectmenuchange\",\r\n        function() {\r\n          $(this).blur();\r\n          self.$dlg.data(\"this\").enableSubmit();\r\n        });\r\n\r\n    setTimeout(\r\n      () => this.$dlg\r\n      .find('select[data-i18n-tooltip] ~ .ui-selectmenu-button')\r\n      .tooltip({\r\n        items: \".ui-selectmenu-button\",\r\n        position: {\r\n          my: \"left+15 center\",\r\n          at: \"right center\",\r\n          within: \"body\"\r\n        },\r\n        content: function() {\r\n          return $.i18n(\r\n            $(this)\r\n            .prev()\r\n            .data('i18n-tooltip'));\r\n        }\r\n      }),\r\n      100);\r\n\r\n    this.$dlg.find(\".submit\")\r\n    .on(\"click\", () => this.submit());\r\n\r\n    this.enableSubmit();\r\n\r\n    console.debug(\"Created\", this.id);\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Subclass to set any dynamic values from context.\r\n   * Superclass must be called BEFORE subclass code.\r\n   * @return {Promise} promise that resolves to undefined\r\n   */\r\n  openDialog() {\r\n    console.debug(\"Opening\", this.id);\r\n    this.$dlg.data(\"this\", this);\r\n    return Promise.resolve(this);\r\n  }\r\n\r\n  /**\r\n   * Validate fields to determine if submit can be enabled.\r\n   * Override in subclasses.\r\n   */\r\n  canSubmit() {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Enable submit if field values allow it.\r\n   * @protected\r\n   */\r\n  enableSubmit() {\r\n    this.$dlg.find(\".submit\").prop(\r\n      \"disabled\", !this.canSubmit());\r\n  }\r\n\r\n  /**\r\n   * Populate a structure mapping field names to values.\r\n   * @param {object} p optional hash of param values, so subclasses\r\n   * can handle non-input type data.\r\n   */\r\n  getFieldValues(p)  {\r\n    if (!p)\r\n      p = {};\r\n    this.$dlg\r\n    .find(\"input[name],select[name],textarea[name]\")\r\n    .each(function() {\r\n      let name = $(this).attr(\"name\");\r\n      let value;\r\n      if (this.type === \"checkbox\")\r\n        value = $(this).is(\":checked\") ? true : false;\r\n      else if (this.type === \"radio\") {\r\n        if (!$(this).is(\":checked\"))\r\n          return;\r\n        // Radio buttons are grouped by name, so use id\r\n        name = this.id;\r\n        value = true;\r\n      } else if (this.type === \"number\") {\r\n        value = parseInt($(this).val());\r\n        if (isNaN(value))\r\n          return;\r\n      } else // text, password, email, <select, <textarea\r\n        value = $(this).val() || $(this).text();\r\n      //console.debug(name,\"=\",value);\r\n      // Collect <input with the same name, and make arrays\r\n      if (typeof p[name] === \"undefined\")\r\n        p[name] = value;\r\n      else if (typeof p[name] === \"string\")\r\n        p[name] = [ p[name], value ];\r\n      else\r\n        p[name].push(value);\r\n    });\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Handle submit button\r\n   * @param {object} vals optional hash of param values, so subclasses\r\n   * can handle non-input type data.\r\n   * @private\r\n   */\r\n  submit(vals) {\r\n    this.$dlg.dialog(\"close\");\r\n    vals = this.getFieldValues(vals);\r\n\r\n    if (this.options.onSubmit)\r\n      this.options.onSubmit(this, vals);\r\n\r\n    if (!this.options.postAction)\r\n      return;\r\n\r\n    // Note that password fields are sent as plain text. This is\r\n    // not a problem so long as the comms are protected by HTTPS,\r\n    // and is simpler/cleaner than using BasicAuth.\r\n    // Some day we may implement OpenAuth, but there's no hurry.\r\n    $.ajax({\r\n      url: this.options.postAction,\r\n      type: \"POST\",\r\n      contentType: \"application/json\",\r\n      data: JSON.stringify(vals)\r\n    })\r\n    .then(data => {\r\n      if (typeof this.options.postResult === \"function\")\r\n        this.options.postResult(data);\r\n    })\r\n    .catch(jqXHR => {\r\n      // Note that the console sees an XML parsing error on a 401\r\n      // response to /signin, due to the response body containing a\r\n      // non-XML string (\"Unauthorized\"). It would be nice to catch\r\n      // this gracefully and suppress the console print, but I can't\r\n      // find any way to do that.\r\n      if (typeof this.options.error === \"function\")\r\n        this.options.error(jqXHR);\r\n      else\r\n        console.error(jqXHR.responseText);\r\n    });\r\n  }\r\n}\r\n\r\nexport { Dialog }\r\n","/*Copyright (C) 2022 The Xanado Project https://github.com/cdot/Xanado\r\n  License MIT. See README.md at the root of this distribution for full copyright\r\n  and license information. Author Crawford Currie http://c-dot.co.uk*/\r\n/* eslint-env browser, jquery */\r\n\r\n/**\r\n * Dialog for game display. Demand loads the HTML.\r\n */\r\nimport { Dialog } from \"./Dialog.js\";\r\n\r\n/**\r\n * Dialog for opening / editing a game\r\n * @extends Dialog\r\n */\r\nclass GameDialog extends Dialog {\r\n\r\n  constructor(options) {\r\n    super(\"GameDialog\", $.extend({\r\n      title: $.i18n(\"title-game-dlg\", options.game.key)\r\n    }, options));\r\n  }\r\n\r\n  createDialog() {\r\n\r\n    this.$dlg.find(\"button[name=options]\")\r\n    .button()\r\n    .on(\r\n      \"click\", () => {\r\n        const dlg = this.$dlg.data(\"this\");\r\n        dlg.options.ui.gameOptions(dlg.options.game);\r\n      });\r\n\r\n    this.$dlg.find(\"button[name=observe]\")\r\n    .hide()\r\n    .button()\r\n    .on(\"click\", () => {\r\n      this.$dlg.dialog(\"close\");\r\n      const dlg = this.$dlg.data(\"this\");\r\n      dlg.options.ui.observe(dlg.options.game);\r\n    });\r\n\r\n    this.$dlg.find(\"button[name=join]\")\r\n    .hide()\r\n    .button()\r\n    .on(\"click\", () => {\r\n      this.$dlg.dialog(\"close\");\r\n      const dlg = this.$dlg.data(\"this\");\r\n      dlg.options.ui.joinGame(dlg.options.game);\r\n    });\r\n\r\n    this.$dlg.find(\"button[name=robot]\")\r\n    .hide()\r\n    .button()\r\n    .on(\"click\", () => {\r\n      const dlg = this.$dlg.data(\"this\");\r\n      dlg.options.ui.addRobot(dlg.options.game);\r\n    });\r\n\r\n    this.$dlg.find(\"button[name=invite]\")\r\n    .hide()\r\n    .button()\r\n    .on(\"click\", () => {\r\n      const dlg = this.$dlg.data(\"this\");\r\n      dlg.options.ui.invitePlayers(dlg.options.game);\r\n    });\r\n\r\n    this.$dlg.find(\"button[name=another]\")\r\n    .hide()\r\n    .button()\r\n    .on(\"click\", () => {\r\n      const dlg = this.$dlg.data(\"this\");\r\n      dlg.options.ui.anotherGame(dlg.options.game);\r\n    });\r\n\r\n    this.$dlg.find(\"button[name=delete]\")\r\n    .hide()\r\n    .button()\r\n    .on(\"click\", () => {\r\n      this.$dlg.dialog(\"close\");\r\n      const dlg = this.$dlg.data(\"this\");\r\n      dlg.options.ui.deleteGame(dlg.options.game);\r\n    });\r\n\r\n    return super.createDialog();\r\n  }\r\n\r\n  /**\r\n   * Update dynamic fields.\r\n   * @param {Game} game will replace the game\r\n   * the dialog was constructed with. Used when refreshing the dialog.\r\n   */\r\n  populate(game) {\r\n    if (game)\r\n      this.options.game = game;\r\n    else\r\n      game = this.options.game;\r\n    this.$dlg.attr(\"name\", game.key);\r\n\r\n    const $options = this.$dlg.find(\"button[name=options]\");\r\n    $options.toggle(this.options.ui.session && game.turns.length === 0);\r\n\r\n    this.$dlg.find(\"div[name=headline]\")\r\n    .empty()\r\n    .append(`${game.edition} ${game.dictionary || \"\"}`);\r\n\r\n    const $table = this.$dlg.find(\".player-table\")\r\n          .empty()\r\n          .attr(\"name\", game.key);\r\n    const isActive = !game.hasEnded();\r\n\r\n    game.getPlayers().forEach(\r\n      player => $table.append(this.options.ui.$player(game, player, isActive)));\r\n\r\n    if (isActive)\r\n      // .find because it's not in the document yet\r\n      $table.find(`#player${game.whosTurnKey}`).addClass(\"whosTurn\");\r\n\r\n    const $join = this.$dlg.find(\"button[name=join]\").hide();\r\n    const $robot = this.$dlg.find(\"button[name=robot]\").hide();\r\n    const $invite = this.$dlg.find(\"button[name=invite]\").hide();\r\n    const $another = this.$dlg.find(\"button[name=another]\").hide();\r\n    const $observe = this.$dlg.find(\"button[name=observe]\").hide();\r\n    const $delete = this.$dlg.find(\"button[name=delete]\").hide();\r\n    if (this.options.ui.session) {\r\n      $delete.show();\r\n      if (isActive) {\r\n        if (!game.getPlayerWithKey(this.options.ui.session.key)\r\n            && ((game.maxPlayers || 0) === 0\r\n                || game.getPlayers().length < game.maxPlayers))\r\n          $join.show().button(\"option\", { label: $.i18n(\"Join game\") });\r\n        if (this.options.ui.getSetting(\"canEmail\"))\r\n          $invite.show();\r\n        if (!game.getPlayers().find(p => p.isRobot))\r\n          $robot.show();\r\n      } else {\r\n        // Game is over, offer to observe\r\n        $observe.show();\r\n        if (!game.nextGameKey)\r\n          $another.show();\r\n      }\r\n    } else\r\n      // Nobody signed in, offer to observe\r\n      $observe.show();\r\n  }\r\n\r\n  openDialog() {\r\n    this.populate();\r\n    return super.openDialog();\r\n  }\r\n}\r\n\r\nexport { GameDialog }\r\n"],"names":["Dialog","id","options","this","$dlg","$","length","get","Platform","getFilePath","html","then","html_code","append","document","createElement","attr","addClass","Promise","resolve","dialog","title","width","minWidth","modal","open","data","openDialog","createDialog","find","i18n","each","css","self","selectmenu","on","blur","enableSubmit","setTimeout","tooltip","items","position","my","at","within","content","prev","submit","console","debug","prop","canSubmit","p","value","name","type","is","parseInt","val","isNaN","text","push","vals","getFieldValues","onSubmit","postAction","ajax","url","contentType","JSON","stringify","postResult","jqXHR","error","responseText","GameDialog","extend","game","key","button","dlg","ui","gameOptions","hide","observe","joinGame","addRobot","invitePlayers","anotherGame","deleteGame","toggle","session","turns","empty","edition","dictionary","$table","isActive","hasEnded","getPlayers","forEach","player","$player","whosTurnKey","$join","$robot","$invite","$another","$observe","$delete","show","getPlayerWithKey","maxPlayers","label","getSetting","isRobot","nextGameKey","populate"],"sourceRoot":""}