{"version":3,"file":"client/LoginDialog.ClientGameUI.js","mappings":"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","sources":["webpack://@warren-bank/scrabble/./src/browser/Dialog.js","webpack://@warren-bank/scrabble/./src/client/LoginDialog.js","webpack://@warren-bank/scrabble/./src/client/PasswordMixin.js"],"sourcesContent":["/*Copyright (C) 2019-2022 The Xanado Project https://github.com/cdot/Xanado\r\n  License MIT. See README.md at the root of this distribution for full copyright\r\n  and license information. Author Crawford Currie http://c-dot.co.uk*/\r\n/* eslint-env browser, jquery */\r\n\r\n/* global Platform */\r\n\r\n/**\r\n * Base class of modal dialogs with demand-loadable HTML and a submit\r\n * button.\r\n *\r\n * HTML is loaded on demand from the html directory, based in the `id`\r\n * of the dialog (or the `html` option.\r\n *\r\n * In the HTML, any input or select that has a \"name\" attribute will\r\n * be used to populate a structure representing the dialog data.\r\n *\r\n * If a `postAction` URL option is set, this structure will be posted to the\r\n * URL and the result passed to an optional `postResult` function.\r\n *\r\n * Alternatively (or additionally), the `onSubmit` option can be set to\r\n * a function that will be called with `this` when the submit button\r\n * is pressed, *before* the `postAction` is sent.\r\n */\r\nclass Dialog {\r\n\r\n  /**\r\n   * Construct the named dialog, demand-loading the HTML as\r\n   * necessary. Do not use this - use {@linkcode Dialog#open|open()}\r\n   * instead.\r\n   * @param {string} id the dialog name\r\n   * @param {object} options options\r\n   * @param {string?} options.html optional name of HTML file to\r\n   * load, defaults to the id of the dialog\r\n   * @param {string?} options.postAction AJAX call name. If defined,\r\n   * the dialog fields will be posted here on close.\r\n   * @param {function?} options.postResult passed result\r\n   * of postAction AJAX call. Does nothing unless `postAction` is also\r\n   * defined.\r\n   * @param {function?} options.onSubmit Passed this, can be used without\r\n   * postAction.\r\n   * @param {function} options.error error function, passed jqXHR\r\n   */\r\n  constructor(id, options) {\r\n    /**\r\n     * Identifier for this dialog\r\n     */\r\n    this.id = id;\r\n\r\n    /**\r\n     * Cache of settings\r\n     * @member {object}\r\n     */\r\n    this.options = options;\r\n\r\n    /**\r\n     * Cache of jQuery object\r\n     * @member {jQuery}\r\n     * @private\r\n     */\r\n    this.$dlg = $(`#${id}`);\r\n\r\n    let promise;\r\n    if (this.$dlg.length === 0) {\r\n      // HTML is not already present; load it asynchronously.\r\n      promise = $.get(Platform.getFilePath(\r\n        `html/${options.html || id}.html`))\r\n      .then(html_code => {\r\n        $(\"body\").append(\r\n          $(document.createElement(\"div\"))\r\n          .attr(\"id\", id)\r\n          .addClass(\"dialog\")\r\n          .html(html_code));\r\n        this.$dlg = $(`#${id}`);\r\n      });\r\n    } else\r\n      promise = Promise.resolve();\r\n\r\n    promise\r\n    .then(() => this.$dlg.dialog({\r\n      title: options.title,\r\n      width: 'auto',\r\n      minWidth: 400,\r\n      modal: true,\r\n      open: () => {\r\n        if (this.$dlg.data(\"dialog_created\"))\r\n          this.openDialog();\r\n        else {\r\n          this.$dlg.data(\"dialog_created\", true);\r\n          this.createDialog()\r\n          .then(() => this.openDialog());\r\n        }\r\n      }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Handle dialog creation once the HTML has been loaded, mainly\r\n   * for associating handlers and loading background data. This is\r\n   * invoked on an `open` event rather than `create` so we can be\r\n   * sure all initialisation steps are complete before the dialog\r\n   * opens.\r\n   * Override in subclasses to attach handlers etc. Subclasses should\r\n   * return super.createDialog()\r\n   * @protected\r\n   */\r\n  createDialog() {\r\n    this.$dlg\r\n    .find(\"[data-i18n]\")\r\n    .i18n();\r\n\r\n    this.$dlg\r\n    .find(\"input[data-i18n-placeholder]\")\r\n    .each(function() {\r\n      $(this).attr(\"placeholder\", $.i18n(\r\n        $(this).data(\"i18n-placeholder\")));\r\n    });\r\n\r\n    this.$dlg\r\n    .find(\"label[data-image]\")\r\n    .each(function() {\r\n      $(this).css(\"background-image\",\r\n                  `url(\"${$(this).data('image')}\")`);\r\n    });\r\n\r\n    // Using tooltips with a selectmenu is tricky.\r\n    // Applying tooltip() to the select is useless, you have\r\n    // to apply it to the span that is inserted as next\r\n    // sibling after the select. However this span is not\r\n    // created until some indeterminate time in the future,\r\n    // and there is no event triggered.\r\n    //\r\n    // What we have to do is to wait until the selectmenus\r\n    // have (hopefully!) been created before creating the\r\n    // tooltips.\r\n    const self = this;\r\n    this.$dlg\r\n    .find('select')\r\n    .selectmenu()\r\n    .on(\"selectmenuchange\",\r\n        function() {\r\n          $(this).blur();\r\n          self.$dlg.data(\"this\").enableSubmit();\r\n        });\r\n\r\n    setTimeout(\r\n      () => this.$dlg\r\n      .find('select[data-i18n-tooltip] ~ .ui-selectmenu-button')\r\n      .tooltip({\r\n        items: \".ui-selectmenu-button\",\r\n        position: {\r\n          my: \"left+15 center\",\r\n          at: \"right center\",\r\n          within: \"body\"\r\n        },\r\n        content: function() {\r\n          return $.i18n(\r\n            $(this)\r\n            .prev()\r\n            .data('i18n-tooltip'));\r\n        }\r\n      }),\r\n      100);\r\n\r\n    this.$dlg.find(\".submit\")\r\n    .on(\"click\", () => this.submit());\r\n\r\n    this.enableSubmit();\r\n\r\n    console.debug(\"Created\", this.id);\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Subclass to set any dynamic values from context.\r\n   * Superclass must be called BEFORE subclass code.\r\n   * @return {Promise} promise that resolves to undefined\r\n   */\r\n  openDialog() {\r\n    console.debug(\"Opening\", this.id);\r\n    this.$dlg.data(\"this\", this);\r\n    return Promise.resolve(this);\r\n  }\r\n\r\n  /**\r\n   * Validate fields to determine if submit can be enabled.\r\n   * Override in subclasses.\r\n   */\r\n  canSubmit() {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Enable submit if field values allow it.\r\n   * @protected\r\n   */\r\n  enableSubmit() {\r\n    this.$dlg.find(\".submit\").prop(\r\n      \"disabled\", !this.canSubmit());\r\n  }\r\n\r\n  /**\r\n   * Populate a structure mapping field names to values.\r\n   * @param {object} p optional hash of param values, so subclasses\r\n   * can handle non-input type data.\r\n   */\r\n  getFieldValues(p)  {\r\n    if (!p)\r\n      p = {};\r\n    this.$dlg\r\n    .find(\"input[name],select[name],textarea[name]\")\r\n    .each(function() {\r\n      let name = $(this).attr(\"name\");\r\n      let value;\r\n      if (this.type === \"checkbox\")\r\n        value = $(this).is(\":checked\") ? true : false;\r\n      else if (this.type === \"radio\") {\r\n        if (!$(this).is(\":checked\"))\r\n          return;\r\n        // Radio buttons are grouped by name, so use id\r\n        name = this.id;\r\n        value = true;\r\n      } else if (this.type === \"number\") {\r\n        value = parseInt($(this).val());\r\n        if (isNaN(value))\r\n          return;\r\n      } else // text, password, email, <select, <textarea\r\n        value = $(this).val() || $(this).text();\r\n      //console.debug(name,\"=\",value);\r\n      // Collect <input with the same name, and make arrays\r\n      if (typeof p[name] === \"undefined\")\r\n        p[name] = value;\r\n      else if (typeof p[name] === \"string\")\r\n        p[name] = [ p[name], value ];\r\n      else\r\n        p[name].push(value);\r\n    });\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Handle submit button\r\n   * @param {object} vals optional hash of param values, so subclasses\r\n   * can handle non-input type data.\r\n   * @private\r\n   */\r\n  submit(vals) {\r\n    this.$dlg.dialog(\"close\");\r\n    vals = this.getFieldValues(vals);\r\n\r\n    if (this.options.onSubmit)\r\n      this.options.onSubmit(this, vals);\r\n\r\n    if (!this.options.postAction)\r\n      return;\r\n\r\n    // Note that password fields are sent as plain text. This is\r\n    // not a problem so long as the comms are protected by HTTPS,\r\n    // and is simpler/cleaner than using BasicAuth.\r\n    // Some day we may implement OpenAuth, but there's no hurry.\r\n    $.ajax({\r\n      url: this.options.postAction,\r\n      type: \"POST\",\r\n      contentType: \"application/json\",\r\n      data: JSON.stringify(vals)\r\n    })\r\n    .then(data => {\r\n      if (typeof this.options.postResult === \"function\")\r\n        this.options.postResult(data);\r\n    })\r\n    .catch(jqXHR => {\r\n      // Note that the console sees an XML parsing error on a 401\r\n      // response to /signin, due to the response body containing a\r\n      // non-XML string (\"Unauthorized\"). It would be nice to catch\r\n      // this gracefully and suppress the console print, but I can't\r\n      // find any way to do that.\r\n      if (typeof this.options.error === \"function\")\r\n        this.options.error(jqXHR);\r\n      else\r\n        console.error(jqXHR.responseText);\r\n    });\r\n  }\r\n}\r\n\r\nexport { Dialog }\r\n","/*Copyright (C) 2019-2022 The Xanado Project https://github.com/cdot/Xanado\r\n  License MIT. See README.md at the root of this distribution for full copyright\r\n  and license information. Author Crawford Currie http://c-dot.co.uk*/\r\n/* eslint-env browser, jquery */\r\n\r\nimport { Dialog } from \"../browser/Dialog.js\";\r\nimport { PasswordMixin } from \"./PasswordMixin.js\";\r\n\r\n/**\r\n * @extends Dialog\r\n * @mixes PasswordMixin\r\n */\r\nclass LoginDialog extends PasswordMixin(Dialog) {\r\n\r\n  constructor(options) {\r\n    options.onSubmit = () => {\r\n      this.options.postAction = this.getAction();\r\n    };\r\n    super(\"LoginDialog\", $.extend({\r\n      title: $.i18n(\"Sign in\")\r\n    }, options));\r\n  }\r\n\r\n  enableSubmit() {\r\n    if (this.getAction() === \"register\") {\r\n      const user = this.$dlg.find(\"#register_username\").val();\r\n      return (user\r\n              && user !== $.i18n(\"Advisor\")\r\n              && user !== $.i18n(\"Robot\"));\r\n    }\r\n    return true;\r\n  }\r\n\r\n  getAction() {\r\n    const active = this.$dlg.find(\"#tabs\").tabs(\"option\", \"active\");\r\n    return {\r\n      0: \"/signin\",\r\n      1: \"/register\",\r\n      2: \"/reset-password\"\r\n    }[active];\r\n  }\r\n\r\n  createDialog() {\r\n    const $tabs = this.$dlg.find(\"#tabs\");\r\n    $tabs.tabs();\r\n\r\n    const $las = this.$dlg.find(\".signed-in-as\");\r\n    if ($las.length > 0) {\r\n      $.get(\"/session\")\r\n      .then(user => $las.text(\r\n        $.i18n(\"signed-in-as\", user.name)));\r\n    }\r\n\r\n    this.$dlg.find(\".forgotten-password\")\r\n    .on(\"click\", () => $tabs.tabs(\"option\", \"active\", 2));\r\n\r\n    return $.get(\"/oauth2-providers\")\r\n    .then(list => {\r\n      if (!list || list.length === 0)\r\n        return;\r\n      const $table = $(document.createElement(\"table\"))\r\n            .attr(\"width\", \"100%\");\r\n      for (let provider of list) {\r\n        const $td = $(document.createElement(\"td\"))\r\n              .addClass(\"provider-logo\")\r\n              .attr(\"title\", $.i18n(\"sign-in-using\", provider.name));\r\n        const $logo = $(`<img src=\"${provider.logo}\" />`);\r\n        // Note: this MUST be done using from an href and\r\n        // not an AJAX request, or CORS will foul up.\r\n        const $a = $(document.createElement(\"a\"));\r\n        $a.attr(\"href\",\r\n                `/oauth2/signin/${provider.name}?origin=${encodeURI(window.location)}`);\r\n        $a.append($logo);\r\n        $td.append($a);\r\n        $td.tooltip();\r\n        $table.append($td);\r\n      }\r\n      $(\"#signin-tab\")\r\n      .prepend($(`<div class=\"sign-in-using\">${$.i18n(\"Sign in using:\")}</div>`)\r\n               .append($table)\r\n               .append(`<br /><div class=\"sign-in-using\">${$.i18n(\"text-or-xanado\")}</div>`));\r\n    })\r\n    .then(() => super.createDialog());\r\n  }\r\n}\r\n\r\nexport { LoginDialog }\r\n","/*Copyright (C) 2019-2022 The Xanado Project https://github.com/cdot/Xanado\r\n  License MIT. See README.md at the root of this distribution for full copyright\r\n  and license information. Author Crawford Currie http://c-dot.co.uk*/\r\n/* eslint-env browser, jquery */\r\n\r\n/**\r\n * Mixin for dialogs that contain password fields. For info on using\r\n * this style of mixin, see {@link https://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/|here}\r\n * @mixin client/PasswordMixin\r\n */\r\nconst PasswordMixin = superclass => class extends superclass {\r\n\r\n  /**\r\n   * Add the configuration of password fields\r\n   * @memberof client/PasswordMixin\r\n   * @instance\r\n   */\r\n  createDialog() {\r\n\r\n    // hide or show a password.\r\n    this.$dlg.find('.hide-password')\r\n    .button({\r\n      icon: \"icon-eye-open\"\r\n    })\r\n    .on(\"click\", function() {\r\n      const $icon = $(this);\r\n      const $field = $icon.prev(\"input\");\r\n      if ($field.attr(\"type\") === \"password\") {\r\n        $field.attr(\"type\", \"text\");\r\n        $icon.button(\"option\", \"icon\", \"icon-eye-closed\");\r\n      } else {\r\n        $field.attr(\"type\", \"password\");\r\n        $icon.button(\"option\", \"icon\", \"icon-eye-open\");\r\n      }\r\n      // focus and move cursor to the end of input field\r\n      var len = $field.val().length * 2;\r\n      $field[0].setSelectionRange(len, len);\r\n    });\r\n\r\n    this.$dlg.find(\".is-password\")\r\n    .on(\"keyup\", evt => {\r\n      if (evt.keyCode === 13)\r\n        this.submit();\r\n    });\r\n\r\n    return super.createDialog();\r\n  }\r\n};\r\n\r\nexport { PasswordMixin }\r\n"],"names":["Dialog","id","options","this","$dlg","$","length","get","Platform","getFilePath","html","then","html_code","append","document","createElement","attr","addClass","Promise","resolve","dialog","title","width","minWidth","modal","open","data","openDialog","createDialog","find","i18n","each","css","self","selectmenu","on","blur","enableSubmit","setTimeout","tooltip","items","position","my","at","within","content","prev","submit","console","debug","prop","canSubmit","p","value","name","type","is","parseInt","val","isNaN","text","push","vals","getFieldValues","onSubmit","postAction","ajax","url","contentType","JSON","stringify","postResult","jqXHR","error","responseText","LoginDialog","getAction","extend","user","tabs","$tabs","$las","list","$table","provider","$td","$logo","logo","$a","encodeURI","window","location","prepend","PasswordMixin","superclass","button","icon","$icon","$field","len","setSelectionRange","evt","keyCode"],"sourceRoot":""}